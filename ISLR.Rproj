Version: 1.0

RestoreWorkspace: Default
SaveWorkspace: Default
AlwaysSaveHistory: Default

EnableCodeIndexing: Yes
UseSpacesForTab: Yes
NumSpacesForTab: 2
Encoding: UTF-8

RnwWeave: Sweave
LaTeX: pdfLaTeX


#1
install.packages("ISLR")
install.packages("MASS")
library("MASS")
library(ISLR)
names(Smarket)
summary(Smarket)
cor(Smarket [-9])
#no correlation between today's returns and yesterday's return

attach(Smarket)
plot(Volume)
View(Smarket)


#creating a logistic regression to predict the direction of stocks using lag1, lag5 and volume

glm.fit<- glm(Direction~Lag1+Lag5+Volume,data=Smarket,family=binomial)
summary(glm.fit)
coef(glm.fit)

#checking contrasts
contrasts(Direction)

#checking the probability of each value
glm.probs<-predict(glm.fit,type="response")
glm.probs

#creating a vector of 1250 'down' labels
glm.pred<-rep("Down",1250)
glm.pred[glm.probs>0.5]="Up"
glm.pred

#confusion matrix
table(glm.pred,Direction)

#using mean function to to compute the fraction of days the model predicted correctly
 mean(glm.pred==Direction)

#Creating a subset of the training data to test the model on held-out data
train<-(Year<2005)
train
Smarket.2005<-Smarket[!train,]
Smarket.2005
Direction.2005<-Direction[!train]

#creating a logistic regression model that is trained only with data<2005
glm.fit.2<-glm(Direction~Lag1+Lag5+Volume,data=Smarket,family=binomial,subset=train)
summary(glm.fit.2)
glm.probs.2<-predict(glm.fit.2,Smarket.2005,type="response")
glm.probs.2

glm.pred.2<-rep("Down",252)
glm.pred.2[glm.probs.2>0.5]="Up"
glm.pred.2

#confusion matrix
table(glm.pred.2,Direction.2005)

#calculating proportion of right classification i.e., test error rate
mean(glm.pred.2==Direction.2005)

#Now performing LDA
lda.fit=lda(Direction~Lag1+Lag2,data=Smarket,subset=train)
lda.fit

#Predictions by the LDA model
lda.predict<-predict(lda.fit,Smarket.2005)
lda.predict
names(lda.predict)

#LDA model classification of market going up or down 
#i.e., by default based on 50% threshold
lda.class<-lda.predict$class
lda.class

table(lda.class,Direction.2005)
mean(lda.class==Direction.2005)

#trying to change the threshold to 90% posterior probability of the market going Down
sum(lda.predict$posterior[ ,1]>.9)

#fitting a QDA model
qda.fit=qda(Direction~Lag1+Lag2,data=Smarket,subset=train)
qda.fit

qda.predict<-predict(qda.fit,Smarket.2005)$class
qda.predict

table(qda.predict,Direction.2005)
mean(qda.predict==Direction.2005)

#QDA model worked the best





#2

library(ISLR)
set.seed(1)
train=sample(392,196)

#Cross Validation where data is divided into 2 halves
#fitting a linear regression model to the auto dataset using the above training data
View(Auto)
lm.fit<-lm(mpg~horsepower,data=Auto,subset=train)
lm.fit

#finding out the MSE of the test data
attach(Auto)
mean((mpg-predict(lm.fit,Auto))[-train]^2)

#LM for polynomial regression of the Auto data
lm.fit2<-lm(mpg~poly(horsepower,2),data=Auto,subset=train)

#finding the MSE of the test data
attach(Auto)
mean((mpg-predict(lm.fit2,Auto))[-train]^2)


#Cross Validation using LOOCV
library(boot)
glm.fit<-glm(mpg~horsepower,data=Auto)
cv.err<-cv.glm(Auto,glm.fit)
cv.err$delta
#the mean of all test error rate = 24.23

#the LOOCV test error score for different polynomial LR of Auto dataset

cv.error<-rep(0,5)
for (i in 1:5) {
  glm.fit<-glm(mpg~poly(horsepower,i),data=Auto)
  cv.error[i]=cv.glm(Auto,glm.fit)$delta
}
cv.error


#Cross Validation using K-folds
set.seed(17)
cv.error.10<-rep(0,10)
for (i in 1:10) {
  glm.fit<-glm(mpg~poly(horsepower,i),data=Auto)
  cv.error.10[i]=cv.glm(Auto,glm.fit,K=10)$delta
}
cv.error.10


#Bootstrap method
View(Portfolio)

alpha.fn<-function(data,index){
  X=data$X[index]
  Y=data$Y[index]
  return((var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y)))
}

alpha.fn(Portfolio,1:100)

alpha.fn(Portfolio,sample(100,100,replace=T))

#Using the boot function now
boot(Portfolio,alpha.fn,R=1000)

#bootstrapping method in LR
boot.fn=function(data,index)
  return(coef(lm(mpg~horsepower,data=data,subset=index)))
boot.fn(Auto,1:392)

set.seed(1)
boot.fn(Auto,sample(392,392,replace=T))

boot(Auto,boot.fn,1000)

summary(lm(mpg~horsepower,data=Auto))$coef

boot.fn=function(data,index)
  coefficients(lm(mpg~horsepower+I(horsepower^2),data=data,subset=index))
set.seed(1)
boot(Auto,boot.fn,1000)
